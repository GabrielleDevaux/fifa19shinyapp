p
feature <- "Release.Clause"
df <- fifa2019_raw %>% select(feature, Name)
df <- df[order(df[,feature], decreasing = TRUE),]
df <- df[10:1,]
if(feature == "Wage"){ df$chr <- paste0(df[,feature]/1000, "K \u20ac")
} else{df$chr <- paste0(df[,feature]/1000000, "M \u20ac")}
p <- ggplot(data=df, aes_string(x="Name", y=feature)) +
geom_bar(stat="identity", width = 0.6, fill = "steelblue") +
geom_text(aes_string(label="chr"),hjust=1.2, vjust=0.4, color="white", size=5, face="bold") +
coord_flip()
p <- p + scale_x_discrete(limits=df$Name) +
theme_minimal() +
theme(axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5)) +
ggtitle(paste("Top 10 players with highest", feature)) +
labs(x ="", y = "")
p
feature <- "Release.Clause"
df <- fifa2019_raw %>% select(feature, Name)
df <- df[order(df[,feature], decreasing = TRUE),]
df <- df[10:1,]
if(feature == "Wage"){ df$chr <- paste0(df[,feature]/1000, "K \u20ac")
} else{df$chr <- paste0(df[,feature]/1000000, "M \u20ac")}
p <- ggplot(data=df, aes_string(x="Name", y=feature)) +
geom_bar(stat="identity", width = 0.6, fill = "steelblue") +
geom_text(aes_string(label="chr"),hjust=1.2, vjust=0.5, color="white", size=5, face="bold") +
coord_flip()
p <- p + scale_x_discrete(limits=df$Name) +
theme_minimal() +
theme(axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5)) +
ggtitle(paste("Top 10 players with highest", feature)) +
labs(x ="", y = "")
p
feature <- "Release.Clause"
df <- fifa2019_raw %>% select(feature, Name)
df <- df[order(df[,feature], decreasing = TRUE),]
df <- df[10:1,]
if(feature == "Wage"){ df$chr <- paste0(df[,feature]/1000, "K \u20ac")
} else{df$chr <- paste0(df[,feature]/1000000, "M \u20ac")}
p <- ggplot(data=df, aes_string(x="Name", y=feature)) +
geom_bar(stat="identity", width = 0.6, fill = "steelblue") +
geom_text(aes_string(label="chr"),hjust=1.1, vjust=0.45, color="white", size=5, face="bold") +
coord_flip()
p <- p + scale_x_discrete(limits=df$Name) +
theme_minimal() +
theme(axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5)) +
ggtitle(paste("Top 10 players with highest", feature)) +
labs(x ="", y = "")
p
source('inst/dev/run_dev.R')
feature <- "Release.Clause"
df <- fifa2019_raw %>% select(feature, Name)
df <- df[order(df[,feature], decreasing = TRUE),]
df <- df[10:1,]
if(feature == "Wage"){ df$chr <- paste0(df[,feature]/1000, "K \u20ac")
} else{df$chr <- paste0(df[,feature]/1000000, "M \u20ac")}
p <- ggplot(data=df, aes_string(x="Name", y=feature)) +
geom_bar(stat="identity", width = 0.6, fill = "steelblue") +
geom_text(aes_string(label="chr"),hjust=1.1, vjust=0.45, color="white", size=5) +
coord_flip()
p <- p + scale_x_discrete(limits=df$Name) +
theme_minimal() +
theme(axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
plot.title = element_text(hjust = 0.5, color = "#000000", size=14, face="bold")) +
ggtitle(paste("Top 10 players with highest", feature)) +
labs(x ="", y = "")
p
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
getwd()
load("D:/Users/gabrielle.devaux/Documents/MISSIONS/Shiny_demo/fifa2019demo/inst/www/data/fifa2019_raw.RData")
load("D:/Users/gabrielle.devaux/Documents/MISSIONS/Shiny_demo/fifa2019demo/inst/app/www/data/fifa2019_raw.RData")
plot(fifa2019_raw$Age, fifa2019_raw$SprintSpeed)
plot(fifa2019_raw$Age, fifa2019_raw$Weight)
source('inst/dev/run_dev.R')
fifa19_raw <- fifa2019_raw
hist(fifa19_raw$Age)
df <- fifa19_raw["Age"]
p <- ggplot(df, aes(x = Age))+
geom_histogram()
p
df <- fifa19_raw["Age"]
p <- ggplot(df, aes(x = Age))+
geom_histogram(color = "darkblue", fill = "light-blue")
p
df <- fifa19_raw["Age"]
p <- ggplot(df, aes(x = Age))+
geom_histogram(color = "darkblue", fill = "lightblue")
p
df <- fifa19_raw["Age"]
p <- ggplot(df, aes(x = Age))+
geom_histogram(color = "darkblue", fill = "lightblue") +
theme_classic() +
labs(title = "Histogramme of Age",
x = "Age (years)",
y = "Count")
p
p <- ggplot(df, aes(x = Age))+
geom_histogram(color = "darkblue", fill = "lightblue") +
theme_light() +
labs(title = "Histogramme of Age",
x = "Age (years)",
y = "Count")
p
df <- fifa19_raw["Age"]
p <- ggplot(df, aes(x = Age))+
geom_histogram(color = "darkblue", fill = "lightblue") +
theme_classic() +
labs(title = "Histogramme of Age",
x = "Age (years)",
y = "Count") +
theme(plot.title = element_text(hjust = 0.5, color = "#000000", size=14, face="bold"))
p
p <- ggplot(df, aes(x = Age))+
geom_histogram(color = "darkblue", fill = "lightblue") +
theme_linedraw() +
labs(title = "Histogramme of Age",
x = "Age (years)",
y = "Count") +
theme(plot.title = element_text(hjust = 0.5, color = "#000000", size=14, face="bold"))
p
df <- fifa19_raw["Age"]
p <- ggplot(df, aes(x = Age))+
geom_histogram(color = "darkblue", fill = "lightblue") +
theme_gray() +
labs(title = "Histogramme of Age",
x = "Age (years)",
y = "Count") +
theme(plot.title = element_text(hjust = 0.5, color = "#000000", size=14, face="bold"))
p
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
?box
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
install.packages("wordcloud2")
library(wordcloud2)
head(demoFreq)
fifa19_raw = fifa2019_raw
freq <- table(fifa19_raw$Nationality)
head(freq)
freq <- t(table(fifa19_raw$Nationality))
head(freq)
freq <- cbind(table(fifa19_raw$Nationality), names(table(fifa19_raw$Nationality)))
head(freq)
table(fifa19_raw$Nationality)
as.vector(table(fifa19_raw$Nationality))
freq <- cbind(as.vector(table(fifa19_raw$Nationality)), names(table(fifa19_raw$Nationality)))
head(freq)
head(demoFreq)
freq <- data.frame(freq = as.vector(table(fifa19_raw$Nationality)),
word = names(table(fifa19_raw$Nationality)))
head(freq)
wordcloud2(freq)
str(demoFreq)
str(freq)
freq <- data.frame(word = names(table(fifa19_raw$Nationality)),
freq = as.vector(table(fifa19_raw$Nationality)))
wordcloud2(freq)
demoFreq
freq <- data.frame(word = names(table(fifa19_raw$Nationality)),
freq = as.vector(table(fifa19_raw$Nationality)))
freq <- freq[order(freq$freq, decreasing = TRUE)]
wordcloud2(freq)
freq <- data.frame(word = names(table(fifa19_raw$Nationality)),
freq = as.vector(table(fifa19_raw$Nationality)))
freq <- freq[order(freq$freq, decreasing = TRUE),]
wordcloud2(freq)
wordcloud2(freq, size = 1.6)
wordcloud2(freq, size = 1.6)
wordcloud2(freq, size = 0.5)
wordcloud2(freq, size = 0.3)
wordcloud2(freq, size = 0.5)
output$cloud_natio <- renderPlot({
freq <- data.frame(word = names(table(fifa19_raw$Nationality)),
freq = as.vector(table(fifa19_raw$Nationality)))
freq <- freq[order(freq$freq, decreasing = TRUE),]
wordcloud2(freq, size = 0.5)
})
wordcloud2(freq, size = 0.5)
?wordcloud2
source('inst/dev/run_dev.R')
usethis::use_package('wordcloud2')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
library(wordcloud)
fifa19_raw = fifa2019_raw
freq <- data.frame(word = names(table(fifa19_raw$Nationality)),
freq = as.vector(table(fifa19_raw$Nationality)))
freq <- freq[order(freq$freq, decreasing = TRUE),]
wordcloud(freq$word, freq$freq)
wordcloud(freq$word, freq$freq,
random.color=TRUE)
wordcloud(freq$word, freq$freq,
random.color=TRUE)
wordcloud(freq$word, freq$freq,
random.order = FALSE)
wordcloud(freq$word, freq$freq,
random.order = FALSE,
scale=c(3,.5))
colors
colors[1]
colors()[1]
colors()
wordcloud(freq$word, freq$freq,
random.order = FALSE,
random.color = TRUE,
scale=c(3,.5),
colors=colors())
wordcloud(freq$word, freq$freq,
random.order = FALSE,
random.color = TRUE,
scale=c(3,.5),
colors=colors())
source('inst/dev/run_dev.R')
usethis::use_package('wordcloud')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
library(shiny); source('inst/dev/run_dev.R')
runApp('inst/app')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
library("RColorBrewer")
fifa19_raw <- fifa2019_raw
freq <- data.frame(word = names(table(fifa19_raw$Nationality)),
freq = as.vector(table(fifa19_raw$Nationality)))
freq <- freq[order(freq$freq, decreasing = TRUE),]
wordcloud(freq$word, freq$freq,
random.order = FALSE,
# random.color = TRUE,
scale=c(3,0.5),
colors=colors=brewer.pal(8, "Dark2"),
max.words = 100)
wordcloud(freq$word, freq$freq,
random.order = FALSE,
# random.color = TRUE,
scale=c(3,0.5),
colors=brewer.pal(8, "Dark2"),
max.words = 100)
wordcloud(freq$word, freq$freq,
random.order = FALSE,
# random.color = TRUE,
scale=c(3,0.5),
colors=brewer.pal(8, "Dark2"),
max.words = 100)
wordcloud(freq$word, freq$freq,
random.order = FALSE,
# random.color = TRUE,
scale=c(3,0.5),
colors=brewer.pal(8, "Dark2"),
max.words = 100)
wordcloud(freq$word, freq$freq,
random.order = FALSE,
# random.color = TRUE,
scale=c(2,0.5),
colors=brewer.pal(8, "Dark2"),
max.words = 100)
par(oma= c(0,0,0,0),
mar = c(0,0,0,0))
wordcloud(freq$word, freq$freq,
random.order = FALSE,
# random.color = TRUE,
scale=c(2,0.5),
colors=brewer.pal(8, "Dark2"),
max.words = 100)
brewer.pal(8, "Dark2")
wordcloud(freq$word, freq$freq,
random.order = FALSE,
# random.color = TRUE,
scale=c(2,0.5),
colors=brewer.pal(20, "Dark2"),
max.words = 100)
wordcloud(freq$word, freq$freq,
random.order = FALSE,
# random.color = TRUE,
scale=c(2,0.5),
colors=brewer.pal(8, "Dark2"),
max.words = 100)
source('inst/dev/run_dev.R')
usethis::use_package('RColorBrewer')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
plot(1:10, type = "n")
legend("center", c("Selected player", "Others"))
plot.new
plot.new()
legend("center", c("Selected player", "Others"))
legend("center", c("Selected player", "Others"),
colr = c("red", "blue"),
pch = 22)
legend("center", c("Selected player", "Others"),
col = c("red", "blue"),
pch = 22)
legend("center", c("Selected player", "Others"),
col = c("red", "blue"),
pch = 15)
legend("center", c("Selected player", "Others"),
col = c("red", "blue"),
pch = 15, cex = 1.5)
legend("center", c("Selected player", "Others"),
col = c(COLOR$playerborder, COLOR$othersborder),
pch = 15, cex = 1.5)
legend("center", c(p()$Name, "Others"),
col = c(COLOR$playerborder, COLOR$othersborder),
pch = 15, cex = 2)
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
styler:::style_pkg()
styler:::style_active_file()
styler:::style_active_file()
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
library(shiny); source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
source('inst/dev/run_dev.R')
min(c(1,2,3,4,5),0.5)
min(c(1,2,3,4,5),2)
?radar
?radarchart
source('inst/dev/run_dev.R')
library(fifa2019demo)
fibonacci_sans_alloc <- function(n){
# n : entier > 2 .
# La fonction renvoit un vecteur contenant les n premiers termes de
# la suite de fibonacci
res <- c(1,1)
for(i in 3:n){
res <- c(res, res[i-1] + res[i-2])
}
return(res)
}
fibonacci_sans_alloc(5)
fibonacci_sans_alloc(50)
fibonacci_sans_alloc(16)
fibonacci_avec_alloc <- function(n){
# n : entier > 2 .
# La fonction renvoit un vecteur contenant les n premiers termes de
# la suite de fibonacci
res <- numeric(n) # initialisation d'un vecteur vite de taille n
res[1:2] <- 1 # initialisation des 2 premiers termes
for(i in 3:n){
res[i] <- res[i-1] + res[i-2]
}
return(res)
}
fibonacci_avec_alloc(16)
t0 <- Sys.time()          # t0 contient
t0
n <- 10^3
n <- 10^3
t0 <- Sys.time()          # t0 contient l'heure courante
fibonacci_sans_alloc(n)   # calcul des n premiers termes
t_sans <- Sys.time() - t0 # recuperation du temps de calcul
t2 <- Sys.time()
fibonacci_avec_alloc(n)
t_avec <- Sys.time() - t2
n <- 10^3
t0 <- Sys.time()          # t0 contient l'heure courante
fibo1 <- fibonacci_sans_alloc(n)   # calcul des n premiers termes
t_sans <- Sys.time() - t0 # recuperation du temps de calcul
t2 <- Sys.time()
fibo2 <- fibonacci_avec_alloc(n)
t_avec <- Sys.time() - t2
t_avec
n <- 10^6
t0 <- Sys.time()          # t0 contient l'heure courante
fibo1 <- fibonacci_sans_alloc(n)   # calcul des n premiers termes
n <- 10^3
t0 <- Sys.time()          # t0 contient l'heure courante
fibo1 <- fibonacci_sans_alloc(n)   # calcul des n premiers termes
t_sans <- Sys.time() - t0 # recuperation du temps de calcul
t2 <- Sys.time()
fibo2 <- fibonacci_avec_alloc(n)
t_avec <- Sys.time() - t2
plot(c(1,2), c(t_sans, t_avec), type = "h")
barplot(c(t_sans, t_avec))
c(t_sans, t_avec)
barplot(c(1,2))
c(t_sans, t_avec)
barplot(c(t_sans, t_avec))
?barplot
test <- c(t_sans, t_avec)
test <- as.vector(c(t_sans, t_avec))
barplot(as.vector(c(t_sans, t_avec)))
barplot(as.vector(c("Sans allocation" = t_sans, "Avec allocation " =  t_avec)),
xlim = c(""))
barplot(as.vector(c("Sans allocation" = t_sans, "Avec allocation " =  t_avec)))
barplot(as.vector(data.frame("Sans allocation" = t_sans, "Avec allocation " =  t_avec)))
res <- as.vector(c(t_sans,t_avec))
names(res) = c("Sans allocation", "Avec allocation ")
barplot()
barplot(res)
barplot(res, ylab = "Secondes")
barplot(res, ylab = "Secondes",
main = paste("Différence de temps d'éxecution pour n =", n))
n <- 10^4
t0 <- Sys.time()          # t0 contient l'heure courante
fibo1 <- fibonacci_sans_alloc(n)   # calcul des n premiers termes
t_sans <- Sys.time() - t0 # recuperation du temps de calcul
t2 <- Sys.time()
fibo2 <- fibonacci_avec_alloc(n)
t_avec <- Sys.time() - t2
res <- as.vector(c(t_sans,t_avec))
names(res) = c("Sans allocation", "Avec allocation ")
barplot(res, ylab = "Secondes",
main = paste("Différence de temps d'éxecution pour n =", n))
barplot(res, ylab = "Secondes",
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec vs", res[2], "sec"))
n <- 10^4
t0 <- Sys.time()          # t0 contient l'heure courante
fibo1 <- fibonacci_sans_alloc(n)   # calcul des n premiers termes
t_sans <- Sys.time() - t0 # recuperation du temps de calcul
t2 <- Sys.time()
fibo2 <- fibonacci_avec_alloc(n)
t_avec <- Sys.time() - t2
res <- round(as.vector(c(t_sans,t_avec)), digits = 6)
names(res) = c("Sans allocation", "Avec allocation ")
barplot(res, ylab = "Secondes",
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec vs", res[2], "sec"))
barplot(res, ylab = "Secondes",
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec VS", res[2], "sec"))
barplot(res, ylab = "Secondes",
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
barplot(res, ylab = "Secondes",
width = 0.5,
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
barplot(res, ylab = "Secondes",
width = 0.5,
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
barplot(res, ylab = "Secondes",
width = 0.5, space = 1
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
barplot(res, ylab = "Secondes",
width = 0.5, space = 1,
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
box()
barplot(res, ylab = "Secondes",
width = 0.5, space = 1,
col = "lightblue"
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
barplot(res, ylab = "Secondes",
width = 0.5, space = 1,
col = "lightblue",
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
barplot(res, ylab = "Secondes",
width = 0.2, space = 1,
col = "lightblue",
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
tN <- table(Ni <- stats::rpois(100, lambda = 5))
barplot(tN, col = rainbow(20))
barplot(tN, col = rainbow(20), space=0)
barplot(tN, col = rainbow(20), space=10)
barplot(res, ylab = "Secondes", space = 0.5,
col = "lightblue",
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
barplot(res, ylab = "Secondes", space = 0.5,
col = "lightblue",
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
barplot(res, ylab = "Secondes", space = 0.5,
col = "lightblue",
main = paste("Différence de temps d'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
barplot(res, ylab = "Secondes", space = 0.5,
col = "lightblue",
main = paste("Différence de temps \nd'éxecution pour n =", n),
sub = paste(res[1], "sec   VS  ", res[2], "sec"))
library(jsonlite)
## Download
pkgs <- fromJSON("http://crandb.r-pkg.org/-/events")
library(rsconnect)
